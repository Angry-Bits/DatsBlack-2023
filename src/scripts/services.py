import math
from typing import List, Dict, Tuple

import src.scripts.router as r


def read_file(file_path: str) -> str:  # TODO: –£–¥–∞–ª–∏—Ç—å, –Ω—É–∂–µ–Ω –¥–ª—è –º–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        with open(file_path, 'r', encoding='utf-8') as content:
            return content.read()
    except OSError:
        print('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


def calculate_ship_next_coords(ship: Dict) -> Tuple[int, int]:
    '''–í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä–∞–±–ª—è.'''
    current_x = ship['x']
    current_y = ship['y']
    match ship['direction']:
        case 'north':
            current_y -= ship['speed']
        case 'east':
            current_x += ship['speed']
        case 'south':
            current_y += ship['speed']
        case 'west':
            current_x -= ship['speed']
    return (current_x, current_y)


def is_belongs_to_circle(
    ship_1: Tuple[int, int],
    ship_2: Tuple[int, int],
    shot_radius: int = 20
) -> bool:
    '''
    –í—ã—á–∏—Å–ª—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ ship_2 –≤ –∑–æ–Ω–µ –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏ –≤—ã—Å—Ç—Ä–µ–ª–∞ –æ—Ç ship_1.
    '''
    ship_1_x, ship_1_y = ship_1
    ship_2_x, ship_2_y = ship_2
    d = math.sqrt((ship_2_x - ship_1_x)**2 + (ship_2_y - ship_1_y)**2)
    return d <= shot_radius


def tick():
    '''–•–æ–¥ —Ç–∏–∫–∞.'''
    response = r.scan()

    my_ships: List[Dict] = response['scan']['myShips']  # –ú–æ–∏ –∫–æ—Ä–∞–±–ª–∏
    enemy_ships: List[Dict] = response['scan']['enemyShips']  # –ß—É–∂–∏–µ –∫–æ—Ä–∞–±–ª–∏

    # –ú–æ–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ
    my_ships_involved_in_next_tick = []

    for enemy_ship in enemy_ships:
        # –ó–¥–æ—Ä–æ–≤—å–µ –∫–æ—Ä–∞–±–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        enemy_ship_hp = response['scan']['hp']

        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä–∞–±–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ
        enemy_next_coords = calculate_ship_next_coords(enemy_ship)

        # –ú–æ–∏ –∫–æ—Ä–∞–±–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏
        my_ships_are_within_shooting_range = []

        for my_ship in my_ships:
            # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–µ–≥–æ –∫–æ—Ä–∞–±–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ
            my_ship_next_coords = calculate_ship_next_coords(my_ship)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∞–±–ª—å –Ω–∞ –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
            if is_belongs_to_circle(
                my_ship_next_coords,
                enemy_next_coords,
                my_ship['cannonRadius']
            ):
                my_ships_are_within_shooting_range.append(my_ship)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π –≤–±–ª–∏–∑–∏
                other_enemy_ships = [
                    _ for _ in enemy_ships if _['id'] != enemy_ship['id']
                ]
                # –ö–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç–∏
                other_ships_are_within_shooting_range = []

                for other_enemy_ship in other_enemy_ships:
                    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ
                    other_enemy_ship_next_coords = \
                        calculate_ship_next_coords(other_enemy_ship)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∞–±–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –Ω–∞ –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–º
                    if is_belongs_to_circle(
                        other_enemy_ship_next_coords,
                        my_ship_next_coords,
                    ):
                        other_ships_are_within_shooting_range.append(other_enemy_ship)

            # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–ª–æ—Ç–æ–≤ –≤ –∑–æ–Ω–µ –∫–æ—Ä–∞–±–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            FIGHT_READINESS_RATIO = 0.75  # –ü–æ—Ä–æ–≥ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–æ—Ä–∞–±–ª—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –±–æ–π (–æ—Ç 0 –¥–æ 1)

            my_ships_flotilla = [
                _ for _ in my_ships_are_within_shooting_range \
                    if _['hp'] >= _['maxHp'] * FIGHT_READINESS_RATIO
            ]
            my_ships_flotilla_hp = sum([_['hp'] for _ in my_ships_flotilla])
            # vs
            enemy_ships_flotilla = [
                _ for _ in other_ships_are_within_shooting_range \
                    if _['hp'] >= _['maxHp']
            ]
            enemy_ships_flotilla_hp = sum([_['hp'] for _ in enemy_ships_flotilla]) + enemy_ship_hp

            if my_ships_flotilla_hp > enemy_ships_flotilla_hp:
                for my_ship in my_ships_flotilla:
                    if my_ship not in my_ships_involved_in_next_tick and enemy_ship_hp:
                        # –ï—â–µ —Ä–∞–∑ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–µ–º—Å—è
                        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–µ–≥–æ –∫–æ—Ä–∞–±–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç–∏–∫–µ
                        my_ship_next_coords = calculate_ship_next_coords(my_ship)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∞–±–ª—å –Ω–∞ –¥–æ—Å—è–≥–∞–µ–º–æ—Å—Ç—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
                        if is_belongs_to_circle(
                            my_ship_next_coords,
                            enemy_next_coords,
                            my_ship['cannonRadius']
                        ):
                            my_ships_involved_in_next_tick.append(my_ship)
                            # TODO: –û–ì–û–ù–¨! üí£
                            enemy_ship_hp -= 1
                if enemy_ship_hp:
                    pass
                    # TODO: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                    my_ships_involved_in_next_tick.extend(
                        [_ for _ in my_ships_flotilla if _ not in my_ships_involved_in_next_tick]
                    )
            else:
                pass
                # TODO: –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π –≤–æ —Ñ–ª–æ—Ç–∏–ª–∏–∏ –∏ –æ—Ç—Å—Ç—É–ø–∏—Ç—å
